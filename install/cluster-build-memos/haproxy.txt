export CONTROL_PLANE_IP=10



apt install keepalived

nano /etc/keepalived/keepalived.conf

! /etc/keepalived/keepalived.conf
! Configuration File for keepalived
global_defs {
    router_id LVS_DEVEL
    enable_script_security
}
vrrp_script check_apiserver {
  script "/etc/keepalived/check_apiserver.sh"
  interval 3
  weight -2
  fall 10
  rise 2
}

vrrp_script check_sock_frontend {
  script "/etc/keepalived/check_sock_frontend.sh"
  interval 3
  weight -2
  fall 10
  rise 2
}

vrrp_instance VI_1 {
    state MASTER
    interface ens160
    virtual_router_id 52
    priority 100
    authentication {
        auth_type PASS
        auth_pass 43
    }
    virtual_ipaddress {
        10.31.139.125
    }
    track_script {
        check_apiserver
    }
}

vrrp_instance VI_2 {
    state MASTER
    interface ens160
    virtual_router_id 53
    priority 100
    authentication {
        auth_type PASS
        auth_pass 43
    }
    virtual_ipaddress {
        10.31.139.126
    }
    track_script {
        check_apiserver
    }
}





! /etc/keepalived/keepalived.conf
! Configuration File for keepalived
global_defs {
    router_id LVS_DEVEL
    enable_script_security
}
vrrp_script check_apiserver {
  script "/etc/keepalived/check_apiserver.sh"
  interval 3
  weight -2
  fall 10
  rise 2
}

vrrp_script check_sock_frontend {
  script "/etc/keepalived/check_sock_frontend.sh"
  interval 3
  weight -2
  fall 10
  rise 2
}

vrrp_instance VI_1 {
    state BACKUP
    interface ens160
    virtual_router_id 52
    priority 99
    authentication {
        auth_type PASS
        auth_pass 43
    }
    virtual_ipaddress {
        10.31.139.125
    }
    track_script {
        check_apiserver
    }
}

vrrp_instance VI_2 {
    state BACKUP
    interface ens160
    virtual_router_id 53
    priority 99
    authentication {
        auth_type PASS
        auth_pass 43
    }
    virtual_ipaddress {
        10.31.139.126
    }
    track_script {
        check_apiserver
    }
}


nano /etc/keepalived/check_sock_frontend.sh
вариант 1 
#!/bin/bash
/usr/bin/ping -c 1 -W 1 10.31.139.126 > /dev/null 2>&1

вариант 2
#!/bin/sh

errorExit() {
    echo "*** $*" 1>&2
    exit 1
}

curl --silent --max-time 2 --insecure https://localhost:80/ -o /dev/null || errorExit "Error GET https://localhost:80/"
if ip addr | grep -q 10.31.139.126; then
    curl --silent --max-time 2 --insecure https://10.31.139.126:80/ -o /dev/null || errorExit "Error GET https://10.31.139.126:80/"
fi


chgrp keepalived_script  /etc/keepalived/check_sock_frontend.sh
chmod 750 /etc/keepalived/check_sock_frontend.sh
chmod u+x  /etc/keepalived/check_sock_frontend.sh



nano /etc/keepalived/check_apiserver.sh

#!/bin/sh

errorExit() {
    echo "*** $*" 1>&2
    exit 1
}

curl --silent --max-time 2 --insecure https://localhost:6443/ -o /dev/null || errorExit "Error GET https://localhost:6443/"
if ip addr | grep -q 10.31.139.125; then
    curl --silent --max-time 2 --insecure https://10.31.139.125:6443/ -o /dev/null || errorExit "Error GET https://10.31.139.125:6443/"
fi

#/etc/keepalived/check_apiserver.sh

#!/bin/sh
APISERVER_VIP=10.31.139.125
APISERVER_DEST_PORT=6443

errorExit() {
    echo "*** $*" 1>&2
    exit 1
}

curl --silent --max-time 2 --insecure https://localhost:${APISERVER_DEST_PORT}/ -o /dev/null || errorExit "Error GET https://localhost:${APISERVER_DEST_PORT}/"
if ip addr | grep -q ${APISERVER_VIP}; then
    curl --silent --max-time 2 --insecure https://${APISERVER_VIP}:${APISERVER_DEST_PORT}/ -o /dev/null || errorExit "Error GET https://${APISERVER_VIP}:${APISERVER_DEST_PORT}/"
fi



groupadd -r keepalived_script
useradd -r -s /sbin/nologin -g keepalived_script -M keepalived_script


chgrp keepalived_script  /etc/keepalived/check_apiserver.sh
chmod 750 /etc/keepalived/check_apiserver.sh
chmod u+x  /etc/keepalived/check_apiserver.sh

#chown keepalived_script  /etc/keepalived/check_apiserver.sh


systemctl enable keepalived --now



apt-get install haproxy -y


systemctl start haproxy
systemctl enable haproxy

nano /etc/haproxy/haproxy.cfg

# /etc/haproxy/haproxy.cfg
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    log /dev/log local0
    log /dev/log local1 notice
    daemon

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option                  redispatch
    retries                 1
    timeout http-request    10s
    timeout queue           20s
    timeout connect         5s
    timeout client          20s
    timeout server          20s
    timeout http-keep-alive 10s
    timeout check           10s
    stats timeout 30s

#---------------------------------------------------------------------
# apiserver frontend which proxys to the control plane nodes
#---------------------------------------------------------------------
frontend apiserver
    bind *:8443
    mode tcp
    option tcplog
    default_backend apiserver

#---------------------------------------------------------------------
# round robin balancing for apiserver
#---------------------------------------------------------------------
backend apiserver
    option httpchk GET /healthz
    http-check expect status 200
    mode tcp
    option ssl-hello-chk
    balance     roundrobin
        server controlplane1 controlplane1:6443 check
        server controlplane2 controlplane2:6443 check
        server controlplane3 controlplane3:6443 check



frontend socks_front
        # Frontend listen port - 80
        bind 10.31.139.126:80
        # Set the default backend
        default_backend    socks_backend_servers

  
# Define backend
backend socks_backend_servers                                                                                                                     
        mode http
        # Define the backend server
        server             backend01 10.31.139.251:30080 check
        server             backend02 10.31.139.109:30080 check


systemctl restart haproxy
systemctl enable haproxy --now


#haproxy -f /etc/haproxy/haproxy.cfg -db
journalctl -xeu haproxy.service

nc -vz  10.31.139.125 8443

systemctl edit --full haproxy.service
#RestartSec=90
[Unit]
After=network-online.target rsyslog.service keepalived.service



